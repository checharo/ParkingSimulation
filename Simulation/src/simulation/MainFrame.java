
package simulation;

import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JOptionPane;
import realSensor.MessageReceptor;


/**
 * @author César Martínez D'Granda (cesarm@student.unimelb.edu.au)
 */
public class MainFrame extends javax.swing.JFrame {

    private Sensor[][] matrix;
    /* The canvas for rendering the parking lot */
    private ParkingCanvas canvas;
    /* The central logic for controlling the Sensor Network */
    private Central central;
    /* The thread that generates input randomly */
    private RandomSimulator randomSimulator;
    
    /* The selected Sensor by the user, null at the beginning */
    private Sensor selectedSensor;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initApplication();
        
    }
    
    /**
     * Initializes the application by reading the Matrix from a file and 
     * rendering the canvas for the first time. If it can't read the file
     * it quits the application.
     */
    private void initApplication() {
        

        String file = "";
        try {    
            file = JOptionPane.showInputDialog(this, "Plase provide a parking "
                    + "lot file to read (csv). If left empty parking.csv will "
                    + "be read.", "Parking Lot Simulator", 
                    JOptionPane.QUESTION_MESSAGE);
            /* If user selects cancel */
            if (file == null) System.exit(0); 
            if (file.equals("")) file = "parking.csv";
            matrix = MatrixUtil.readMatrix(file);
            /* Initiate the central logic of the Sensor Netork and pass the reference */
            central = new Central(matrix, this);
            /* Initiate the thread that receive the messages of the real sensor */
            Thread threadReceptor = new MessageReceptor(central);
            threadReceptor.start();
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(this, 
                    "The file " + file + " could not be found", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this, 
                    "There was an I/O error while reading file: " + ioe.getMessage(), 
                    "Error" + ioe.getMessage(), JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        
        /* Create the parkign lot canvas and add it */
        canvas = new ParkingCanvas(matrix);
        canvas.setBackground(new Color(102, 102, 102));
        canvas.modifySize(pnlParking.getWidth() - 5, pnlParking.getHeight() - 5);
        canvas.setLayout(null);
        canvas.setLocation(2, 2);
        pnlParking.add(canvas);
        

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] instanceof VirtualSensor) {
                    VirtualSensor vsensor = (VirtualSensor) matrix[i][j];
                    vsensor.setCentral(central);
                }
                if (matrix[i][j] instanceof RealSensor) {
                    RealSensor rsensor = (RealSensor) matrix[i][j];
                    rsensor.setCentral(central);
                }

            }
        }
        
        /* Disable certain GUI elements until appropiate */
        reloadSensorProperties();
        /* Set the value for available spaces and cars circulating */
        refreshState();
        /* Instantiate the random simulator but do not run it */
        randomSimulator = new RandomSimulator(central);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOptions = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblSensor = new javax.swing.JLabel();
        lblSensorValue = new javax.swing.JLabel();
        lblLight = new javax.swing.JLabel();
        txtLight = new javax.swing.JTextField();
        btnLight = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblAvailableSpaces = new javax.swing.JLabel();
        lblAvailableSpacesValue = new javax.swing.JLabel();
        lblCarsCirculating = new javax.swing.JLabel();
        lblCarsCirculatingValue = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnInsertCar = new javax.swing.JButton();
        btnCarExits = new javax.swing.JButton();
        lblRandomSimulator = new javax.swing.JLabel();
        btnRandomSimulator = new javax.swing.JButton();
        pnlParking = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Virtual Parking Lot");
        setBackground(new java.awt.Color(102, 102, 102));
        setBounds(new java.awt.Rectangle(200, 100, 0, 0));
        setLocation(new java.awt.Point(200, 50));
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(720, 720));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                resized(evt);
            }
        });

        pnlOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        lblSensor.setText("Sensor:");

        lblSensorValue.setText("<none>");

        lblLight.setText("Light:");

        txtLight.setColumns(5);
        txtLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLight(evt);
            }
        });

        btnLight.setText("set light");
        btnLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLight(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblSensor)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblSensorValue)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblLight)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtLight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnLight)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblSensor)
                    .add(lblSensorValue))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblLight)
                    .add(txtLight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnLight))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblAvailableSpaces.setText("Available Spaces");

        lblAvailableSpacesValue.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblAvailableSpacesValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAvailableSpacesValue.setText("0");
        lblAvailableSpacesValue.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblAvailableSpacesValue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblCarsCirculating.setText("Cars Circulating");

        lblCarsCirculatingValue.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblCarsCirculatingValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCarsCirculatingValue.setText("0");
        lblCarsCirculatingValue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lblAvailableSpaces, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(lblAvailableSpacesValue, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, lblCarsCirculating, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(lblCarsCirculatingValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(lblAvailableSpaces)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblAvailableSpacesValue)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblCarsCirculating)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblCarsCirculatingValue)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btnInsertCar.setText("Insert car");
        btnInsertCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertCarActionPerformed(evt);
            }
        });

        btnCarExits.setText("Remove car");
        btnCarExits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarExitsActionPerformed(evt);
            }
        });

        lblRandomSimulator.setText("Random Simulator");

        btnRandomSimulator.setText("Turn On");
        btnRandomSimulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomSimulatorActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnInsertCar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnCarExits, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(lblRandomSimulator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnRandomSimulator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(btnInsertCar)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnCarExits)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblRandomSimulator)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnRandomSimulator)
                .add(0, 0, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnlOptionsLayout = new org.jdesktop.layout.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 207, Short.MAX_VALUE)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlOptionsLayout.createSequentialGroup()
                .add(pnlOptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlOptionsLayout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlParking.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlParking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlParkingLayout = new org.jdesktop.layout.GroupLayout(pnlParking);
        pnlParking.setLayout(pnlParkingLayout);
        pnlParkingLayout.setHorizontalGroup(
            pnlParkingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        pnlParkingLayout.setVerticalGroup(
            pnlParkingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 523, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(pnlParking, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlOptions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlParking, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlOptions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_resized
        /* If they are still not initialized do nothing*/
        if (canvas != null && pnlParking != null) {
            canvas.modifySize(pnlParking.getWidth() - 5, pnlParking.getHeight() - 5);
            repaintCanvas();
        }
    }//GEN-LAST:event_resized

    private void canvasClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasClicked
        
        /* Deselect previous sensor */
        if (selectedSensor != null) selectedSensor.setSelected(false);
        /* Select new sensor */
        selectedSensor = canvas.selectSensor(evt.getX(), evt.getY());
        if (selectedSensor != null) selectedSensor.setSelected(true);
        repaintCanvas();
        reloadSensorProperties();
    }//GEN-LAST:event_canvasClicked

    private void setLight(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLight
        
        if (selectedSensor == null) {
            JOptionPane.showMessageDialog(this, 
                "Please select a Virtual Sensor.", 
                "Action Not Allowed", JOptionPane.ERROR_MESSAGE);
        }
        
        int light;
        try {
            light = Integer.parseInt(txtLight.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, 
                    "Please set a valid integer for the light value", 
                    "Number Format Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        txtLight.setText("");
        
        if (selectedSensor instanceof VirtualSensor) {
            VirtualSensor vsensor = (VirtualSensor) selectedSensor;
            vsensor.setCurrentLight(light);
            if (vsensor.getEventThread() != null 
                    && vsensor.getEventThread().isAlive()) {
                vsensor.notifyEvent();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "The Virtual Sensor is not running. Please restart application.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                    "Cannot set the light value for a Real Sensor.", 
                    "Action Not Allowed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_setLight

    private void btnInsertCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertCarActionPerformed
        central.carEnters();
    }//GEN-LAST:event_btnInsertCarActionPerformed

    private void btnCarExitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarExitsActionPerformed
        try {
            central.carExits();
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, nfe.getMessage(), 
                "Operation Not Allowed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCarExitsActionPerformed

    private void btnRandomSimulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomSimulatorActionPerformed
        if (!randomSimulator.isAlive()) {
            randomSimulator.start();
            btnRandomSimulator.setText("Turn Off");
        } else {
            randomSimulator.interrupt();
            btnRandomSimulator.setText("Turn On");
            /* Create new Thread for a future restart */
            randomSimulator = new RandomSimulator(central);
        }
    }//GEN-LAST:event_btnRandomSimulatorActionPerformed

    /**
     * Refreshes the label for available spaces and cars circulating
     */
    public synchronized void refreshState() {
        lblAvailableSpacesValue.setText(central.getSpaces() + "");
        lblCarsCirculatingValue.setText(central.getCars() + "");
        repaintCanvas();
    }
    
    public synchronized void repaintCanvas() {
        canvas.repaint();
    }
    
    /* Reloads the controls with the current Sensor selected */
    private void reloadSensorProperties() {
        
        if (selectedSensor == null) {
            lblSensorValue.setText("<none>");
            txtLight.setText("");
            txtLight.setEnabled(false);
            btnLight.setEnabled(false);
        } else {
            int[] coordinates = canvas.determineCoordinates(selectedSensor);
            if (coordinates == null) {
                lblSensorValue.setText("<error>");
                txtLight.setText("");
                txtLight.setEnabled(false);
                btnLight.setEnabled(false);
            } else {
                lblSensorValue.setText(selectedSensor.toString());
                if (selectedSensor instanceof VirtualSensor) {
                    VirtualSensor vsensor = (VirtualSensor) selectedSensor;
                    txtLight.setText(vsensor.getCurrentLight() + "");
                    txtLight.setEnabled(true);
                    btnLight.setEnabled(true);
                } else {
                    txtLight.setText("");
                    txtLight.setEnabled(false);
                    btnLight.setEnabled(false);
                }
            }
        }
    }
    public static void execute(){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        execute();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarExits;
    private javax.swing.JButton btnInsertCar;
    private javax.swing.JButton btnLight;
    private javax.swing.JButton btnRandomSimulator;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAvailableSpaces;
    private javax.swing.JLabel lblAvailableSpacesValue;
    private javax.swing.JLabel lblCarsCirculating;
    private javax.swing.JLabel lblCarsCirculatingValue;
    private javax.swing.JLabel lblLight;
    private javax.swing.JLabel lblRandomSimulator;
    private javax.swing.JLabel lblSensor;
    private javax.swing.JLabel lblSensorValue;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JPanel pnlParking;
    private javax.swing.JTextField txtLight;
    // End of variables declaration//GEN-END:variables

}

